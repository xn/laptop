#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_bashrc() {
  local text="$1" bashrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.bashrc.local" ]; then
    bashrc="$HOME/.bashrc.local"
  else
    bashrc="$HOME/.bashrc"
  fi

  if ! grep -Fqs "$text" "$bashrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$bashrc"
    else
      printf "\n%s\n" "$text" >> "$bashrc"
    fi
  fi
}

append_to_profile() {
  local text="$1" profile
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.profile.local" ]; then
    bashrc="$HOME/.profile.local"
  else
    bashrc="$HOME/.profile"
  fi

  if ! grep -Fqs "$text" "$bashrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$bashrc"
    else
      printf "\n%s\n" "$text" >> "$bashrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.bashrc" ]; then
  touch "$HOME/.bashrc"
fi

echo eval "$(xcode-select --install)"

# shellcheck disable=SC2016
append_to_bashrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi


gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

fancy_echo "Checking for SSH key, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa -C "nano@fdp.io"

fancy_echo "Adding SSH Key to authentication agent"
  ssh-add ~/.ssh/id_rsa

fancy_echo "Copying SSH key to clipboard"
  pbcopy < ~/.ssh/id_rsa.pub

fancy_echo "Opening browser to add SSH key to Github. Key copied, just paste."
  open "https://github.com/settings/ssh"

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_bashrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_bashrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"

# Unix
brew "ctags"
brew "git"
brew "git-extras"
brew "openssl"
brew "emacs"
brew "bash-git-prompt"
brew "bash-completion"

brew "graphviz"
brew "htop"



# Image manipulation
brew "imagemagick@6"



# Databases
brew "postgres", restart_service: true
brew "redis", restart_service: true
EOF
brew link imagemagick@6 --force
brew cask install java
append_to_profile "export JAVA_HOME=$(/usr/libexec/java_home)"
brew cask install iterm2
echo eval "$(brew tap watsonbox/cmu-sphinx)"
echo eval "$(brew install --HEAD watsonbox/cmu-sphinx/cmu-sphinxbase)"
echo eval "$(brew install --HEAD watsonbox/cmu-sphinx/cmu-pocketsphinx)"
brew install direnv
append_to_profile 'eval "$(direnv hook bash)"'

fancy_echo "Configuring Ruby ..."
fancy_echo "Installing RVM, to change Ruby versions ..."
  curl -L https://get.rvm.io | bash -s stable

fancy_echo "Sourcing RVM"
  source ~/.rvm/scripts/rvm
  fancy_echo "Installing latest Ruby 2.3.3 ..."
  rvm install 2.3.3
  rvm --default use 2.3.3


gem update --system
gem install bundler

curl "https://nodejs.org/dist/latest-v6.x/node-${VERSION:-$(wget -qO- https://nodejs.org/dist/latest-v6.x/ | sed -nE 's|.*>node-(.*)\.pkg</a>.*|\1|p')}.pkg" > "$HOME/Downloads/node-latest.pkg" && sudo installer -store -pkg "$HOME/Downloads/node-latest.pkg" -target "/"
sudo npm install bower -g
sudo npm install ember-cli -g

# Configure git
if [ ! -f "$HOME/.git/config" ]; then
  fancy_echo "Configuring git user name, email, pw..."
  git config --global color.ui true
  echo -n "Github Username > "
  read name
  git config --global user.name "$name"
  git config --global github.user "$name"
  echo -n "Github Email > "
  read email
  git config --global user.email "$email"
  git config --global credential.helper osxkeychain
  git config --global core.editor sublime -n -w
  git config --global alias.a "add"
  git config --global alias.aa "add --all"
  git config --global alias.ae "add --edit"
  git config --global alias.ai "add --interactive"
  git config --global alias.amend "commit --amend -C HEAD"
  git config --global alias.ap "add --patch"
  git config --global alias.aliases "config --get-regexp alias"
  git config --global alias.au "add --update"
  git config --global alias.b "branch"
  git config --global alias.c "commit"
  git config --global alias.ca "commit --amend"
  git config --global alias.changes "diff --name-status -r"
  git config --global alias.cm "commit --message"
  git config --global alias.co "checkout"
  git config --global alias.cpc "cherry-pick"
  git config --global alias.d "diff"
  git config --global alias.dc "diff --cached"
  git config --global alias.div "divergence"
  git config --global alias.ds "diff --staged"
  git config --global alias.f "fetch"
  git config --global alias.h "help"
  git config --global alias.irb "rebase --interactive"
  git config --global alias.l "log --oneline --decorate"
  git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset %an -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
  git config --global alias.m "merge"
  git config --global alias.mm "merge --no-ff"
  git config --global alias.msg "commit --allow-empty -m"
  git config --global alias.p "push"
  git config --global alias.pick "cherry-pick"
  git config --global alias.picks "cherry-pick -s"
  git config --global alias.picke "cherry-pick -e"
  git config --global alias.pu "push -u origin master"
  git config --global alias.r "remote"
  git config --global alias.ra "!git log --graph --abbrev-commit --date=relative -20 --all --pretty='format:%C(yellow)%h%Creset -%C(red)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'"
  git config --global alias.rb "rebase"
  git config --global alias.rba "rebase --abort"
  git config --global alias.rbc "rebase --continue"
  git config --global alias.rbs "rebase --skip"
  git config --global alias.rh "reset --hard"
  git config --global alias.ru "remote update --prune"
  git config --global alias.s "status --short --branch"
  git config --global alias.sl "shortlog"
  git config --global alias.sm "submodule"
  git config --global alias.sma "submodule add"
  git config --global alias.smu "submodule update --init"
  git config --global alias.st "stash"
  git config --global alias.stl "stash list"
  git config --global alias.stp "stash pop"
  git config --global alias.undo "reset --soft HEAD^"
  git config --global alias.wd "diff --color-words"
  git config --global alias.wds "diff --color-words --staged"
  git config --global alias.ls-ignored "ls-files --exclude-standard --ignored --others"
  git config --global alias.prune-remotes '"!for remote in `git remote`; do git remote prune $remote; done"'
fi

number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

sublime_app_support="$HOME/Library/Application Support/Sublime Text 3"
sublime_installed_packages="$sublime_app_support/Installed Packages"

if [[ ! -f "$sublime_installed_packages/Package Control.sublime-package" ]]; then
  fancy_echo "Installing Sublime Package Control ..."

  curl https://packagecontrol.io/Package%20Control.sublime-package -o /tmp/package-control
  mkdir -p "$sublime_installed_packages"
  cp /tmp/package-control "$sublime_installed_packages/Package Control.sublime-package"
  rm -f /tmp/package-control
else
  fancy_echo "Sublime Package Control installed. Skipping ..."
fi

fancy_echo "Tapping Brew Cask Fonts, to allow easy install of fonts ..."
  brew_tap caskroom/fonts

fancy_echo "Installing Font inconsolata-dz, ohhh, pretty ..."
  brew_cask_install font-inconsolata-dz
